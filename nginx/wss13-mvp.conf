# Este bloco de servidor é responsável por redirecionar todo o tráfego HTTP (porta 80) para HTTPS (porta 443).
server {
    listen 80;
    listen [::]:80; # Para IPv6

    # server_name deve ser 'localhost' para testes com certificado autoassinado.
    # Quando for para produção com domínio real, substitua por seu_dominio.com www.seu_dominio.com;
    server_name localhost; 

    # Redireciona permanentemente (código 301) o tráfego HTTP para HTTPS.
    return 301 https://$host$request_uri;
}

# Este é o bloco de servidor principal para a sua aplicação via HTTPS (porta 443).
server {
    listen 443 ssl http2; # Habilita HTTPS (ssl) e HTTP/2 (http2 para performance)
    listen [::]:443 ssl http2; # Para IPv6

    # server_name deve ser 'localhost' para testes.
    # Quando for para produção com domínio real, substitua por seu_dominio.com www.seu_dominio.com;
    server_name localhost; 

    # Aponta para os arquivos do certificado SSL autoassinado que você acabou de criar.
    ssl_certificate /etc/nginx/ssl/nginx.crt;
    ssl_certificate_key /etc/nginx/ssl/nginx.key;

    # Configurações de segurança SSL/TLS recomendadas para garantir criptografia forte.
    # Estas configurações são importantes para a "firmeza" da sua API.
    ssl_session_timeout 1d;
    ssl_session_cache shared:SSL:10m;
    ssl_session_tickets off;

    # Opcional: Descomente e ajuste se quiser forçar TLSv1.3 apenas
    # ssl_protocols TLSv1.3;
    # ssl_ciphers TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256;

    # Para compatibilidade mais ampla (TLSv1.2 e TLSv1.3)
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers 'ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256';
    ssl_prefer_server_ciphers on;

    # Adiciona cabeçalhos de segurança HTTP.
    add_header X-Frame-Options "SAMEORIGIN";
    add_header X-Content-Type-Options "nosniff";
    add_header X-XSS-Protection "1; mode=block";
    add_header Referrer-Policy "no-referrer-when-downgrade";
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload";

    # Configuração do reverse proxy para sua API Node.js.
    # Sua API ainda roda em HTTP para o Nginx.
    location / {
        proxy_pass http://localhost:3001; 
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme; # Indica que a requisição original era HTTPS
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Forwarded-Port $server_port;
    }

    # Opcional: Se você for servir arquivos estáticos (frontend, imagens, CSS, JS) pelo Nginx.
    # Se seu frontend for separado e estiver em outra porta, ignore esta seção.
    # location /static/ {
    #     alias /caminho/para/seus/arquivos/estaticos/;
    #     expires 30d;
    #     access_log off;
    #     add_header Cache-Control "public";
    # }
}
